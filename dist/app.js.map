{"version":3,"sources":["../server/app.js"],"names":["SourceMapSupport","install","app","use","express","static","bodyParser","json","get","req","res","db","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","err","console","log","status","message","post","newIssue","body","created","Date","Issue","validateIssue","insertOne","cleanupIssue","result","_id","insertedId","limit","next","client","MongoClient","connect","useNewUrlParser","connection","listen","error"],"mappings":"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","sourcesContent":["// const express = require(\"express\");\r\n// const bodyParser = require('body-parser');\r\n// const MongoClient = require('mongodb').MongoClient;\r\n// const Issue = require('./issue');\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport { MongoClient } from 'mongodb';\r\nimport 'babel-polyfill';\r\nimport SourceMapSupport from 'source-map-support';\r\nimport Issue from './issue';\r\n\r\nSourceMapSupport.install();\r\n\r\nconst app = express();\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\n// console.log(process.env.NODE_ENV);\r\n// if(process.env.NODE_ENV !== \"production\") {\r\n//     const webpack = require('webpack');\r\n//     const webpackDevMiddleware = require('webpack-dev-middleware');\r\n//     const webpackHotMiddleware = require('webpack-hot-middleware');\r\n\r\n//     const config = require('../webpack.config');\r\n//     config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\r\n\r\n//     const bundler = webpack(config);\r\n//     app.use(webpackDevMiddleware(bundler, {noInfo: true}));\r\n//     app.use(webpackHotMiddleware(bundler, {log: console.log}));\r\n// }\r\n\r\napp.get('/api/issues', (req, res) => {\r\n  db.collection('issues').find().toArray()\r\n    .then((issues) => {\r\n      const metadata = { total_count: issues.length };\r\n      res.json({ _metadata: metadata, records: issues });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      res.status(500).json({ message: `Internal Server Error: ${err}` });\r\n    });\r\n});\r\n\r\napp.post('/api/issues', (req, res) => {\r\n  const newIssue = req.body;\r\n  console.log(newIssue);\r\n\r\n  // newIssue.id = issues.length + 1;\r\n  newIssue.created = new Date();\r\n  if (!newIssue.status) {\r\n    newIssue.status = 'New';\r\n  }\r\n\r\n  const err = Issue.validateIssue(newIssue);\r\n  if (err) {\r\n    res.status(422).json({ message: `Invalid request: ${err}` });\r\n    return;\r\n  }\r\n\r\n  db.collection('issues').insertOne(Issue.cleanupIssue(newIssue))\r\n    .then(result => db.collection('issues').find({ _id: result.insertedId }).limit(1).next())\r\n    .then((newIssue) => {\r\n      console.log(newIssue);\r\n      res.json(newIssue);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      res.status(500).json({message: `Internal Server Error: ${err}`});\r\n    });\r\n})\r\n\r\nlet db;\r\nlet client;\r\n\r\nMongoClient.connect('mongodb://localhost', { useNewUrlParser: true })\r\n  .then((connection) => {\r\n    client = connection;\r\n    db = client.db('issuetracker');\r\n    app.listen(3000, () => {\r\n      console.log('Server started on port 3000');\r\n    });\r\n  })\r\n  .catch((error) => {\r\n    console.log('Error:', error);\r\n  });\r\n"],"file":"app.js"}