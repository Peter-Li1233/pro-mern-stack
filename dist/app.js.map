{"version":3,"sources":["../server/app.js"],"names":["SourceMapSupport","install","app","use","express","static","bodyParser","json","get","req","res","db","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","err","console","log","status","message","post","newIssue","body","created","Date","Issue","validateIssue","insertOne","result","_id","insertedId","limit","next","client","MongoClient","connect","useNewUrlParser","connection","listen","error"],"mappings":";;AAIA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AATA;AACA;AACA;AACA;AAOAA,0BAAiBC,OAAjB;;AAEA,IAAMC,GAAG,GAAG,uBAAZ;AACAA,GAAG,CAACC,GAAJ,CAAQC,iBAAQC,MAAR,CAAe,QAAf,CAAR;AACAH,GAAG,CAACC,GAAJ,CAAQG,oBAAWC,IAAX,EAAR,E,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEAL,GAAG,CAACM,GAAJ,CAAQ,aAAR,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjCC,EAAAA,EAAE,CAACC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GACCC,IADD,CACM,UAAAC,MAAM,EAAI;AACZ,QAAMC,QAAQ,GAAG;AAACC,MAAAA,WAAW,EAAEF,MAAM,CAACG;AAArB,KAAjB;AACAT,IAAAA,GAAG,CAACH,IAAJ,CAAS;AAACa,MAAAA,SAAS,EAAEH,QAAZ;AAAsBI,MAAAA,OAAO,EAACL;AAA9B,KAAT;AACH,GAJD,EAKCM,KALD,CAKO,UAAAC,GAAG,EAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAb,IAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AAACoB,MAAAA,OAAO,mCAA4BJ,GAA5B;AAAR,KAArB;AACH,GARD;AAUH,CAXD;AAaArB,GAAG,CAAC0B,IAAJ,CAAS,aAAT,EAAwB,UAACnB,GAAD,EAAMC,GAAN,EAAc;AAClC,MAAMmB,QAAQ,GAAGpB,GAAG,CAACqB,IAArB;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ,EAFkC,CAIlC;;AACAA,EAAAA,QAAQ,CAACE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;;AACA,MAAG,CAACH,QAAQ,CAACH,MAAb,EAAqB;AACjBG,IAAAA,QAAQ,CAACH,MAAT,GAAkB,KAAlB;AACH;;AAAA;;AAED,MAAMH,GAAG,GAAGU,eAAMC,aAAN,CAAoBL,QAApB,CAAZ;;AACA,MAAGN,GAAH,EAAQ;AACJb,IAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AAACoB,MAAAA,OAAO,6BAAsBJ,GAAtB;AAAR,KAArB;AACA;AACH;;AAEDZ,EAAAA,EAAE,CAACC,UAAH,CAAc,QAAd,EAAwBuB,SAAxB,CAAkCN,QAAlC,EACCd,IADD,CACM,UAAAqB,MAAM;AAAA,WAAIzB,EAAE,CAACC,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B;AAACwB,MAAAA,GAAG,EAAED,MAAM,CAACE;AAAb,KAA7B,EAAuDC,KAAvD,CAA6D,CAA7D,EAAgEC,IAAhE,EAAJ;AAAA,GADZ,EAECzB,IAFD,CAEM,UAAAc,QAAQ,EAAI;AACdL,IAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AACAnB,IAAAA,GAAG,CAACH,IAAJ,CAASsB,QAAT;AACH,GALD,EAMCP,KAND,CAMO,UAAAC,GAAG,EAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAb,IAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AAACoB,MAAAA,OAAO,mCAA4BJ,GAA5B;AAAR,KAArB;AACH,GATD;AAUH,CA1BD;AA4BA,IAAIZ,EAAJ,EAAQ8B,MAAR;;AAEAC,qBAAYC,OAAZ,CAAoB,qBAApB,EAA2C;AAACC,EAAAA,eAAe,EAAE;AAAlB,CAA3C,EACC7B,IADD,CACM,UAAA8B,UAAU,EAAI;AAChBJ,EAAAA,MAAM,GAAGI,UAAT;AACAlC,EAAAA,EAAE,GAAG8B,MAAM,CAAC9B,EAAP,CAAU,cAAV,CAAL;AACAT,EAAAA,GAAG,CAAC4C,MAAJ,CAAW,IAAX,EAAiB,YAAW;AAC5BtB,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACC,GAFD;AAGH,CAPD,EAQCH,KARD,CAQO,UAAAyB,KAAK,EAAI;AACZvB,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBsB,KAAtB;AACH,CAVD","sourcesContent":["// const express = require(\"express\");\r\n// const bodyParser = require('body-parser');\r\n// const MongoClient = require('mongodb').MongoClient;\r\n// const Issue = require('./issue');\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport {MongoClient} from 'mongodb';\r\nimport Issue from './issue';\r\nimport 'babel-polyfill';\r\nimport SourceMapSupport from 'source-map-support';\r\nSourceMapSupport.install();\r\n\r\nconst app = express();\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\n// console.log(process.env.NODE_ENV);\r\n// if(process.env.NODE_ENV !== \"production\") {\r\n//     const webpack = require('webpack');\r\n//     const webpackDevMiddleware = require('webpack-dev-middleware');\r\n//     const webpackHotMiddleware = require('webpack-hot-middleware');\r\n\r\n//     const config = require('../webpack.config');\r\n//     config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\r\n\r\n//     const bundler = webpack(config);\r\n//     app.use(webpackDevMiddleware(bundler, {noInfo: true}));\r\n//     app.use(webpackHotMiddleware(bundler, {log: console.log}));\r\n// }\r\n\r\napp.get('/api/issues', (req, res) => {\r\n    db.collection('issues').find().toArray()\r\n    .then(issues => {\r\n        const metadata = {total_count: issues.length};\r\n        res.json({_metadata: metadata, records:issues});\r\n    })\r\n    .catch(err => {\r\n        console.log(err);\r\n        res.status(500).json({message: `Internal Server Error: ${err}`});\r\n    });\r\n    \r\n});\r\n\r\napp.post('/api/issues', (req, res) => {\r\n    const newIssue = req.body;\r\n    console.log(newIssue);\r\n\r\n    // newIssue.id = issues.length + 1;\r\n    newIssue.created = new Date();\r\n    if(!newIssue.status) {\r\n        newIssue.status = \"New\";\r\n    };\r\n\r\n    const err = Issue.validateIssue(newIssue);\r\n    if(err) {\r\n        res.status(422).json({message: `Invalid request: ${err}`});\r\n        return;\r\n    }\r\n\r\n    db.collection('issues').insertOne(newIssue)\r\n    .then(result => db.collection('issues').find({_id: result.insertedId}).limit(1).next())\r\n    .then(newIssue => {\r\n        console.log(newIssue);\r\n        res.json(newIssue);\r\n    })\r\n    .catch(err => {\r\n        console.log(err);\r\n        res.status(500).json({message: `Internal Server Error: ${err}`});\r\n    });\r\n})\r\n\r\nlet db, client;\r\n\r\nMongoClient.connect('mongodb://localhost', {useNewUrlParser: true})\r\n.then(connection => {\r\n    client = connection;\r\n    db = client.db('issuetracker');\r\n    app.listen(3000, function() {\r\n    console.log('Server started on port 3000');\r\n    });\r\n})\r\n.catch(error => {\r\n    console.log('Error:', error);\r\n});"],"file":"app.js"}